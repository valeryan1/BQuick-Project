// <auto-generated />
using System;
using BQuick.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BQuick.Migrations
{
    [DbContext(typeof(BQuickDbContext))]
    [Migration("20250709043316_SurveyRequestCategories")]
    partial class SurveyRequestCategories
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BQuick.Models.ApprovalDecisionStatus", b =>
                {
                    b.Property<int>("ApprovalDecisionStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApprovalDecisionStatusID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ApprovalDecisionStatusID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ApprovalDecisionStatuses");
                });

            modelBuilder.Entity("BQuick.Models.ApprovalHistory", b =>
                {
                    b.Property<int>("ApprovalHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApprovalHistoryID"));

                    b.Property<int>("ApprovalDecisionStatusID")
                        .HasColumnType("int");

                    b.Property<string>("ApproverRoleAtTime")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ApproverUserID")
                        .HasColumnType("int");

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("MeetingReportInstanceID")
                        .HasColumnType("int");

                    b.Property<int?>("QuotationID")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyReportInstanceID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ApprovalHistoryID");

                    b.HasIndex("ApprovalDecisionStatusID");

                    b.HasIndex("ApproverUserID");

                    b.HasIndex("MeetingReportInstanceID");

                    b.HasIndex("QuotationID");

                    b.HasIndex("SurveyReportInstanceID");

                    b.ToTable("ApprovalHistories");
                });

            modelBuilder.Entity("BQuick.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("AccountPayableCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccountReceivableCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BillingAddressCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BillingAddressCountry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BillingAddressDetail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BillingAddressProvince")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BillingAddressStreet")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BillingAddressZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DefaultCurrency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("DefaultTermsOfPaymentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Fax")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("LastModifiedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mobile")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NPWP")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PurchasingLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShippingAddressCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressCountry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressDetail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ShippingAddressProvince")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressStreet")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ShippingAddressZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CustomerID");

                    b.HasIndex("CustomerCode")
                        .IsUnique()
                        .HasFilter("[CustomerCode] IS NOT NULL");

                    b.HasIndex("DefaultTermsOfPaymentID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BQuick.Models.CustomerContactPerson", b =>
                {
                    b.Property<int>("ContactPersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactPersonID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ContactPersonID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerContactPersons");
                });

            modelBuilder.Entity("BQuick.Models.Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemID"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DimensionH")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("DimensionL")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("DimensionUnit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("DimensionW")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsEOL")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEOS")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTKDN")
                        .HasColumnType("bit");

                    b.Property<int>("ItemCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ItemServiceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ItemTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShipmentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SoftwareVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SpecificationDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("TKDNCertificateAttachmentURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TKDNCertificateNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("TKDNPercentage")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("Weight")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("WeightUnit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ItemID");

                    b.HasIndex("ItemCategoryID");

                    b.HasIndex("ItemCode")
                        .IsUnique();

                    b.HasIndex("ItemTypeID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("BQuick.Models.ItemBundle", b =>
                {
                    b.Property<int>("ItemBundleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemBundleID"));

                    b.Property<int>("ChildItemID")
                        .HasColumnType("int");

                    b.Property<int>("ParentItemID")
                        .HasColumnType("int");

                    b.Property<decimal?>("PriceInBundle")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("QuantityInBundle")
                        .HasColumnType("int");

                    b.HasKey("ItemBundleID");

                    b.HasIndex("ChildItemID");

                    b.HasIndex("ParentItemID");

                    b.ToTable("ItemBundles");
                });

            modelBuilder.Entity("BQuick.Models.ItemCategory", b =>
                {
                    b.Property<int>("ItemCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemCategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ItemCategoryID");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("ItemCategories");
                });

            modelBuilder.Entity("BQuick.Models.ItemType", b =>
                {
                    b.Property<int>("ItemTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemTypeID"));

                    b.Property<int>("ItemCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ItemTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ItemTypeID");

                    b.HasIndex("ItemCategoryID", "ItemTypeName")
                        .IsUnique();

                    b.ToTable("ItemTypes");
                });

            modelBuilder.Entity("BQuick.Models.ItemVendorPricing", b =>
                {
                    b.Property<int>("ItemVendorPricingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemVendorPricingID"));

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeadTimeUnit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("LeadTimeValue")
                        .HasColumnType("int");

                    b.Property<int?>("MinOrderQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("PriceValidityEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PriceValidityStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StockAvailableAtVendor")
                        .HasColumnType("int");

                    b.Property<int>("VendorID")
                        .HasColumnType("int");

                    b.Property<int?>("WarrantyPeriod")
                        .HasColumnType("int");

                    b.Property<string>("WarrantyUnit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ItemVendorPricingID");

                    b.HasIndex("ItemID");

                    b.HasIndex("VendorID");

                    b.ToTable("ItemVendorPricings");
                });

            modelBuilder.Entity("BQuick.Models.MeetingPIC", b =>
                {
                    b.Property<int>("MeetingPIC_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingPIC_ID"));

                    b.Property<int>("MeetingRequestID")
                        .HasColumnType("int");

                    b.Property<int>("PICApprovalStatusID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("MeetingPIC_ID");

                    b.HasIndex("MeetingRequestID");

                    b.HasIndex("PICApprovalStatusID");

                    b.HasIndex("UserID");

                    b.ToTable("MeetingPICs");
                });

            modelBuilder.Entity("BQuick.Models.MeetingReportInstance", b =>
                {
                    b.Property<int>("MeetingReportInstanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingReportInstanceID"));

                    b.Property<int>("GeneratedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("GeneratedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeetingRequestID")
                        .HasColumnType("int");

                    b.Property<string>("ReportContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportMasterID")
                        .HasColumnType("int");

                    b.Property<int>("ReportStatusID")
                        .HasColumnType("int");

                    b.HasKey("MeetingReportInstanceID");

                    b.HasIndex("GeneratedByUserID");

                    b.HasIndex("MeetingRequestID");

                    b.HasIndex("ReportMasterID");

                    b.HasIndex("ReportStatusID");

                    b.ToTable("MeetingReportInstances");
                });

            modelBuilder.Entity("BQuick.Models.MeetingRequest", b =>
                {
                    b.Property<int>("MeetingRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingRequestID"));

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeetingCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("MeetingEndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeetingName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("MeetingStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeetingStatusID")
                        .HasColumnType("int");

                    b.Property<string>("NotesInternal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrimaryPIC_UserID")
                        .HasColumnType("int");

                    b.Property<int>("RFQID")
                        .HasColumnType("int");

                    b.HasKey("MeetingRequestID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MeetingCode")
                        .IsUnique();

                    b.HasIndex("MeetingStatusID");

                    b.HasIndex("PrimaryPIC_UserID");

                    b.HasIndex("RFQID");

                    b.ToTable("MeetingRequests");
                });

            modelBuilder.Entity("BQuick.Models.MeetingStatus", b =>
                {
                    b.Property<int>("MeetingStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingStatusID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MeetingStatusID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MeetingStatuses");
                });

            modelBuilder.Entity("BQuick.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<DateTime>("CreationTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NavigationURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RecipientUserID")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedEntityID")
                        .HasColumnType("int");

                    b.Property<string>("RelatedEntityType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("NotificationID");

                    b.HasIndex("RecipientUserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("BQuick.Models.PICApprovalStatus", b =>
                {
                    b.Property<int>("PICApprovalStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PICApprovalStatusID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PICApprovalStatusID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PICApprovalStatuses");
                });

            modelBuilder.Entity("BQuick.Models.PaymentTerm", b =>
                {
                    b.Property<int>("PaymentTermID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentTermID"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PaymentTermID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PaymentTerms");
                });

            modelBuilder.Entity("BQuick.Models.PurchasingRequest", b =>
                {
                    b.Property<int>("PurchasingRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchasingRequestID"));

                    b.Property<int?>("AssignedToPurchasingUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ItemID_IfExists")
                        .HasColumnType("int");

                    b.Property<int>("PurchasingStatusID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("RFQID")
                        .HasColumnType("int");

                    b.Property<string>("ReasonForRequest")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestedByUserID")
                        .HasColumnType("int");

                    b.Property<string>("RequestedItemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestedItemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SalesAttachmentURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UoM")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PurchasingRequestID");

                    b.HasIndex("AssignedToPurchasingUserID");

                    b.HasIndex("ItemID_IfExists");

                    b.HasIndex("PurchasingStatusID");

                    b.HasIndex("RFQID");

                    b.HasIndex("RequestedByUserID");

                    b.ToTable("PurchasingRequests");
                });

            modelBuilder.Entity("BQuick.Models.PurchasingStatus", b =>
                {
                    b.Property<int>("PurchasingStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchasingStatusID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PurchasingStatusID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PurchasingStatuses");
                });

            modelBuilder.Entity("BQuick.Models.Quotation", b =>
                {
                    b.Property<int>("QuotationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuotationID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DeliveryInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DirectorApproverID")
                        .HasColumnType("int");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FooterText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OverallMarginAmount_Internal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("OverallMarginPercentage_Internal")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("OverallTotalCost_Internal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PaymentTermID")
                        .HasColumnType("int");

                    b.Property<int>("PreparedByUserID")
                        .HasColumnType("int");

                    b.Property<string>("QuotationCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("QuotationStatusID")
                        .HasColumnType("int");

                    b.Property<int>("RFQID")
                        .HasColumnType("int");

                    b.Property<string>("RemarkToCustomer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalesManagerApproverID")
                        .HasColumnType("int");

                    b.Property<string>("SentToCustomerProofURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SentToCustomerTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShipmentTermID")
                        .HasColumnType("int");

                    b.Property<int?>("SplitParentQuotationID")
                        .HasColumnType("int");

                    b.Property<int?>("TechnicalManagerApproverID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalEndorsement_Internal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalFreight_Internal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalPPN_Internal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalQuoteAmount_Customer")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalUnitCost_Internal")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("QuotationID");

                    b.HasIndex("DirectorApproverID");

                    b.HasIndex("PaymentTermID");

                    b.HasIndex("PreparedByUserID");

                    b.HasIndex("QuotationCode")
                        .IsUnique();

                    b.HasIndex("QuotationStatusID");

                    b.HasIndex("RFQID");

                    b.HasIndex("SalesManagerApproverID");

                    b.HasIndex("ShipmentTermID");

                    b.HasIndex("SplitParentQuotationID");

                    b.HasIndex("TechnicalManagerApproverID");

                    b.ToTable("Quotations");
                });

            modelBuilder.Entity("BQuick.Models.QuotationItem", b =>
                {
                    b.Property<int>("QuotationItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuotationItemID"));

                    b.Property<string>("DescriptionOverride")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplaySequence")
                        .HasColumnType("int");

                    b.Property<bool>("DisplayWithDetailInternal")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Endorsement_Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Freight_AmountPerUnit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<decimal>("MarginAmount_Internal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MarginPercentage_Internal")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("PPN_FixedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PPN_Percentage")
                        .HasColumnType("decimal(5, 4)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("QuotationID")
                        .HasColumnType("int");

                    b.Property<decimal>("QuotePricePerUnit_Customer")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("RFQ_ItemID")
                        .HasColumnType("int");

                    b.Property<string>("SalesWarranty")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalCostPerUnit_Internal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalQuotePrice_Customer")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("UnitCost_Internal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("UoM")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("QuotationItemID");

                    b.HasIndex("ItemID");

                    b.HasIndex("QuotationID");

                    b.HasIndex("RFQ_ItemID");

                    b.ToTable("QuotationItems");
                });

            modelBuilder.Entity("BQuick.Models.QuotationStatus", b =>
                {
                    b.Property<int>("QuotationStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuotationStatusID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("QuotationStatusID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("QuotationStatuses");
                });

            modelBuilder.Entity("BQuick.Models.RFQ", b =>
                {
                    b.Property<int>("RFQID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RFQID"));

                    b.Property<int?>("AssignedToAdminSalesID")
                        .HasColumnType("int");

                    b.Property<int?>("ContactPersonID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("OverallBudget")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("OverallLeadTime")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PersonalResourceEmployeeID")
                        .HasColumnType("int");

                    b.Property<int?>("RFQCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("RFQCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RFQName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RFQOpportunityID")
                        .HasColumnType("int");

                    b.Property<int>("RFQStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Resource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SalesManagerAssignerID")
                        .HasColumnType("int");

                    b.HasKey("RFQID");

                    b.HasIndex("AssignedToAdminSalesID");

                    b.HasIndex("ContactPersonID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("PersonalResourceEmployeeID");

                    b.HasIndex("RFQCategoryID");

                    b.HasIndex("RFQCode")
                        .IsUnique();

                    b.HasIndex("RFQOpportunityID");

                    b.HasIndex("RFQStatusID");

                    b.HasIndex("SalesManagerAssignerID");

                    b.ToTable("RFQs");
                });

            modelBuilder.Entity("BQuick.Models.RFQAttachment", b =>
                {
                    b.Property<int>("RFQAttachmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RFQAttachmentID"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FileURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RFQID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UploadedByUserID")
                        .HasColumnType("int");

                    b.HasKey("RFQAttachmentID");

                    b.HasIndex("RFQID");

                    b.HasIndex("UploadedByUserID");

                    b.ToTable("RFQAttachments");
                });

            modelBuilder.Entity("BQuick.Models.RFQCategory", b =>
                {
                    b.Property<int>("RFQCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RFQCategoryID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RFQCategoryID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RFQCategories");
                });

            modelBuilder.Entity("BQuick.Models.RFQNote", b =>
                {
                    b.Property<int>("RFQNoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RFQNoteID"));

                    b.Property<decimal?>("BudgetTarget")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ItemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LeadTimeTarget")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("RFQID")
                        .HasColumnType("int");

                    b.Property<string>("UoM")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("RFQNoteID");

                    b.HasIndex("RFQID");

                    b.ToTable("RFQNotes");
                });

            modelBuilder.Entity("BQuick.Models.RFQOpportunity", b =>
                {
                    b.Property<int>("RFQOpportunityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RFQOpportunityID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RFQOpportunityID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RFQOpportunities");
                });

            modelBuilder.Entity("BQuick.Models.RFQStatus", b =>
                {
                    b.Property<int>("RFQStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RFQStatusID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RFQStatusID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RFQStatuses");
                });

            modelBuilder.Entity("BQuick.Models.RFQ_Item", b =>
                {
                    b.Property<int>("RFQ_ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RFQ_ItemID"));

                    b.Property<int?>("ChosenVendorID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OriginatingPurchasingRequestID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("RFQID")
                        .HasColumnType("int");

                    b.Property<string>("SalesWarranty")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("TargetUnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("UoM")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("RFQ_ItemID");

                    b.HasIndex("ChosenVendorID");

                    b.HasIndex("ItemID");

                    b.HasIndex("OriginatingPurchasingRequestID");

                    b.HasIndex("RFQID");

                    b.ToTable("RFQ_Items");
                });

            modelBuilder.Entity("BQuick.Models.ReportMaster", b =>
                {
                    b.Property<int>("ReportMasterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportMasterID"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ReportTemplateDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportMasterID");

                    b.HasIndex("ReportName")
                        .IsUnique();

                    b.ToTable("ReportMasters");
                });

            modelBuilder.Entity("BQuick.Models.ReportStatus", b =>
                {
                    b.Property<int>("ReportStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportStatusID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ReportStatusID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ReportStatuses");
                });

            modelBuilder.Entity("BQuick.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleID");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BQuick.Models.Setting", b =>
                {
                    b.Property<int>("SettingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SettingGroup")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SettingID");

                    b.HasIndex("SettingGroup", "SettingKey")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("BQuick.Models.ShipmentTerm", b =>
                {
                    b.Property<int>("ShipmentTermID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShipmentTermID"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ShipmentTermID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ShipmentTerms");
                });

            modelBuilder.Entity("BQuick.Models.SurveyCategory", b =>
                {
                    b.Property<int>("SurveyCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyCategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("SurveyCategoryID");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("SurveyCategories");
                });

            modelBuilder.Entity("BQuick.Models.SurveyDocumentation", b =>
                {
                    b.Property<int>("SurveyDocumentationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyDocumentationID"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FileURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SurveyInstanceID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UploadedByUserID")
                        .HasColumnType("int");

                    b.HasKey("SurveyDocumentationID");

                    b.HasIndex("SurveyInstanceID");

                    b.HasIndex("UploadedByUserID");

                    b.ToTable("SurveyDocumentations");
                });

            modelBuilder.Entity("BQuick.Models.SurveyFormMaster", b =>
                {
                    b.Property<int>("SurveyFormID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyFormID"));

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FormTemplateDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("SurveyFormID");

                    b.HasIndex("FormName")
                        .IsUnique();

                    b.ToTable("SurveyFormMasters");
                });

            modelBuilder.Entity("BQuick.Models.SurveyInstance", b =>
                {
                    b.Property<int>("SurveyInstanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyInstanceID"));

                    b.Property<DateTime?>("ActualSurveyEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualSurveyStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilledFormData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmissionStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("SubmissionTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubmittedByUserID")
                        .HasColumnType("int");

                    b.Property<int>("SurveyFormID")
                        .HasColumnType("int");

                    b.Property<int>("SurveyRequestID")
                        .HasColumnType("int");

                    b.HasKey("SurveyInstanceID");

                    b.HasIndex("SubmittedByUserID");

                    b.HasIndex("SurveyFormID");

                    b.HasIndex("SurveyRequestID");

                    b.ToTable("SurveyInstances");
                });

            modelBuilder.Entity("BQuick.Models.SurveyPIC", b =>
                {
                    b.Property<int>("SurveyPIC_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyPIC_ID"));

                    b.Property<int>("PICApprovalStatusID")
                        .HasColumnType("int");

                    b.Property<int>("SurveyRequestID")
                        .HasColumnType("int");

                    b.Property<int>("TechnicalUserID")
                        .HasColumnType("int");

                    b.HasKey("SurveyPIC_ID");

                    b.HasIndex("PICApprovalStatusID");

                    b.HasIndex("SurveyRequestID");

                    b.HasIndex("TechnicalUserID");

                    b.ToTable("SurveyPICs");
                });

            modelBuilder.Entity("BQuick.Models.SurveyReportInstance", b =>
                {
                    b.Property<int>("SurveyReportInstanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyReportInstanceID"));

                    b.Property<int>("GeneratedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("GeneratedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportMasterID")
                        .HasColumnType("int");

                    b.Property<int>("ReportStatusID")
                        .HasColumnType("int");

                    b.Property<int?>("SalesManagerReviewerID")
                        .HasColumnType("int");

                    b.Property<int>("SurveyInstanceID")
                        .HasColumnType("int");

                    b.Property<int?>("TechManagerReviewerID")
                        .HasColumnType("int");

                    b.HasKey("SurveyReportInstanceID");

                    b.HasIndex("GeneratedByUserID");

                    b.HasIndex("ReportMasterID");

                    b.HasIndex("ReportStatusID");

                    b.HasIndex("SalesManagerReviewerID");

                    b.HasIndex("SurveyInstanceID");

                    b.HasIndex("TechManagerReviewerID");

                    b.ToTable("SurveyReportInstances");
                });

            modelBuilder.Entity("BQuick.Models.SurveyRequest", b =>
                {
                    b.Property<int>("SurveyRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyRequestID"));

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerPICName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LocationDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RFQID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RequestEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RequestStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SalesNotesInternal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurveyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SurveyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("SurveyStatusID")
                        .HasColumnType("int");

                    b.HasKey("SurveyRequestID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("RFQID");

                    b.HasIndex("SurveyCode")
                        .IsUnique();

                    b.HasIndex("SurveyStatusID");

                    b.ToTable("SurveyRequests");
                });

            modelBuilder.Entity("BQuick.Models.SurveyStatus", b =>
                {
                    b.Property<int>("SurveyStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyStatusID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SurveyStatusID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SurveyStatuses");
                });

            modelBuilder.Entity("BQuick.Models.TechnicalCompetency", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("SurveyCategoryID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "SurveyCategoryID");

                    b.HasIndex("SurveyCategoryID");

                    b.ToTable("TechnicalCompetencies");
                });

            modelBuilder.Entity("BQuick.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BQuick.Models.Vendor", b =>
                {
                    b.Property<int>("VendorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorID"));

                    b.Property<string>("BillingAddressCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BillingAddressCountry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BillingAddressDetail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BillingAddressProvince")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BillingAddressStreet")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BillingAddressZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CompanyProfileAttachmentURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultCurrency")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("DefaultPaymentTermID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("LastModifiedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("NPWP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OfficeType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RiskLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShippingAddressCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressCountry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressDetail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ShippingAddressProvince")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressStreet")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ShippingAddressZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VendorCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("VendorType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VendorID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("DefaultPaymentTermID");

                    b.HasIndex("VendorCode")
                        .IsUnique()
                        .HasFilter("[VendorCode] IS NOT NULL");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("BQuick.Models.VendorBank", b =>
                {
                    b.Property<int>("VendorBankID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorBankID"));

                    b.Property<string>("AccountHolderName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BranchName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SwiftCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("VendorID")
                        .HasColumnType("int");

                    b.HasKey("VendorBankID");

                    b.HasIndex("VendorID");

                    b.ToTable("VendorBanks");
                });

            modelBuilder.Entity("SurveyCategorySurveyRequest", b =>
                {
                    b.Property<int>("SurveyCategoriesSurveyCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("SurveyRequestsSurveyRequestID")
                        .HasColumnType("int");

                    b.HasKey("SurveyCategoriesSurveyCategoryID", "SurveyRequestsSurveyRequestID");

                    b.HasIndex("SurveyRequestsSurveyRequestID");

                    b.ToTable("SurveyRequestCategories", (string)null);
                });

            modelBuilder.Entity("BQuick.Models.ApprovalHistory", b =>
                {
                    b.HasOne("BQuick.Models.ApprovalDecisionStatus", "ApprovalDecisionStatus")
                        .WithMany("ApprovalHistories")
                        .HasForeignKey("ApprovalDecisionStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.User", "ApproverUser")
                        .WithMany("ApprovalsMade")
                        .HasForeignKey("ApproverUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.MeetingReportInstance", "MeetingReportInstance")
                        .WithMany("ApprovalHistories")
                        .HasForeignKey("MeetingReportInstanceID");

                    b.HasOne("BQuick.Models.Quotation", "Quotation")
                        .WithMany("ApprovalHistories")
                        .HasForeignKey("QuotationID");

                    b.HasOne("BQuick.Models.SurveyReportInstance", "SurveyReportInstance")
                        .WithMany("ApprovalHistories")
                        .HasForeignKey("SurveyReportInstanceID");

                    b.Navigation("ApprovalDecisionStatus");

                    b.Navigation("ApproverUser");

                    b.Navigation("MeetingReportInstance");

                    b.Navigation("Quotation");

                    b.Navigation("SurveyReportInstance");
                });

            modelBuilder.Entity("BQuick.Models.Customer", b =>
                {
                    b.HasOne("BQuick.Models.PaymentTerm", "DefaultTermsOfPayment")
                        .WithMany("CustomersAsDefault")
                        .HasForeignKey("DefaultTermsOfPaymentID");

                    b.Navigation("DefaultTermsOfPayment");
                });

            modelBuilder.Entity("BQuick.Models.CustomerContactPerson", b =>
                {
                    b.HasOne("BQuick.Models.Customer", "Customer")
                        .WithMany("ContactPersons")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BQuick.Models.Item", b =>
                {
                    b.HasOne("BQuick.Models.ItemCategory", "ItemCategory")
                        .WithMany("Items")
                        .HasForeignKey("ItemCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.ItemType", "ItemType")
                        .WithMany("Items")
                        .HasForeignKey("ItemTypeID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ItemCategory");

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("BQuick.Models.ItemBundle", b =>
                {
                    b.HasOne("BQuick.Models.Item", "ChildItem")
                        .WithMany("ChildBundleItems")
                        .HasForeignKey("ChildItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.Item", "ParentItem")
                        .WithMany("ParentBundleItems")
                        .HasForeignKey("ParentItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChildItem");

                    b.Navigation("ParentItem");
                });

            modelBuilder.Entity("BQuick.Models.ItemType", b =>
                {
                    b.HasOne("BQuick.Models.ItemCategory", "ItemCategory")
                        .WithMany("ItemTypes")
                        .HasForeignKey("ItemCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemCategory");
                });

            modelBuilder.Entity("BQuick.Models.ItemVendorPricing", b =>
                {
                    b.HasOne("BQuick.Models.Item", "Item")
                        .WithMany("VendorPricings")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BQuick.Models.Vendor", "Vendor")
                        .WithMany("ItemPricings")
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("BQuick.Models.MeetingPIC", b =>
                {
                    b.HasOne("BQuick.Models.MeetingRequest", "MeetingRequest")
                        .WithMany("AssignedPICs")
                        .HasForeignKey("MeetingRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BQuick.Models.PICApprovalStatus", "PICApprovalStatus")
                        .WithMany("MeetingPICs")
                        .HasForeignKey("PICApprovalStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.User", "User")
                        .WithMany("MeetingAssignments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeetingRequest");

                    b.Navigation("PICApprovalStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BQuick.Models.MeetingReportInstance", b =>
                {
                    b.HasOne("BQuick.Models.User", "GeneratedByUser")
                        .WithMany("GeneratedMeetingReports")
                        .HasForeignKey("GeneratedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BQuick.Models.MeetingRequest", "MeetingRequest")
                        .WithMany("Reports")
                        .HasForeignKey("MeetingRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BQuick.Models.ReportMaster", "ReportMaster")
                        .WithMany("MeetingReportInstances")
                        .HasForeignKey("ReportMasterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BQuick.Models.ReportStatus", "ReportStatus")
                        .WithMany("MeetingReportInstances")
                        .HasForeignKey("ReportStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GeneratedByUser");

                    b.Navigation("MeetingRequest");

                    b.Navigation("ReportMaster");

                    b.Navigation("ReportStatus");
                });

            modelBuilder.Entity("BQuick.Models.MeetingRequest", b =>
                {
                    b.HasOne("BQuick.Models.User", "CreatedByUser")
                        .WithMany("CreatedMeetingRequests")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.MeetingStatus", "MeetingStatus")
                        .WithMany("MeetingRequests")
                        .HasForeignKey("MeetingStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.User", "PrimaryPIC_User")
                        .WithMany("LedMeetingRequests")
                        .HasForeignKey("PrimaryPIC_UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.RFQ", "RFQ")
                        .WithMany("MeetingRequests")
                        .HasForeignKey("RFQID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("MeetingStatus");

                    b.Navigation("PrimaryPIC_User");

                    b.Navigation("RFQ");
                });

            modelBuilder.Entity("BQuick.Models.Notification", b =>
                {
                    b.HasOne("BQuick.Models.User", "RecipientUser")
                        .WithMany("Notifications")
                        .HasForeignKey("RecipientUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecipientUser");
                });

            modelBuilder.Entity("BQuick.Models.PurchasingRequest", b =>
                {
                    b.HasOne("BQuick.Models.User", "AssignedToPurchasingUser")
                        .WithMany("HandledPurchasingRequests")
                        .HasForeignKey("AssignedToPurchasingUserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BQuick.Models.Item", "ItemIfExists")
                        .WithMany()
                        .HasForeignKey("ItemID_IfExists");

                    b.HasOne("BQuick.Models.PurchasingStatus", "PurchasingStatus")
                        .WithMany("PurchasingRequests")
                        .HasForeignKey("PurchasingStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.RFQ", "RFQ")
                        .WithMany("PurchasingRequests")
                        .HasForeignKey("RFQID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BQuick.Models.User", "RequestedByUser")
                        .WithMany("CreatedPurchasingRequests")
                        .HasForeignKey("RequestedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedToPurchasingUser");

                    b.Navigation("ItemIfExists");

                    b.Navigation("PurchasingStatus");

                    b.Navigation("RFQ");

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("BQuick.Models.Quotation", b =>
                {
                    b.HasOne("BQuick.Models.User", "DirectorApprover")
                        .WithMany("DirectorApprovedQuotations")
                        .HasForeignKey("DirectorApproverID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BQuick.Models.PaymentTerm", "PaymentTerm")
                        .WithMany("Quotations")
                        .HasForeignKey("PaymentTermID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.User", "PreparedByUser")
                        .WithMany("PreparedQuotations")
                        .HasForeignKey("PreparedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.QuotationStatus", "QuotationStatus")
                        .WithMany("Quotations")
                        .HasForeignKey("QuotationStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.RFQ", "RFQ")
                        .WithMany("Quotations")
                        .HasForeignKey("RFQID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.User", "SalesManagerApprover")
                        .WithMany("SMApprovedQuotations")
                        .HasForeignKey("SalesManagerApproverID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BQuick.Models.ShipmentTerm", "ShipmentTerm")
                        .WithMany("Quotations")
                        .HasForeignKey("ShipmentTermID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.Quotation", "SplitParentQuotation")
                        .WithMany("SplitChildQuotations")
                        .HasForeignKey("SplitParentQuotationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BQuick.Models.User", "TechnicalManagerApprover")
                        .WithMany("TMApprovedQuotations")
                        .HasForeignKey("TechnicalManagerApproverID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DirectorApprover");

                    b.Navigation("PaymentTerm");

                    b.Navigation("PreparedByUser");

                    b.Navigation("QuotationStatus");

                    b.Navigation("RFQ");

                    b.Navigation("SalesManagerApprover");

                    b.Navigation("ShipmentTerm");

                    b.Navigation("SplitParentQuotation");

                    b.Navigation("TechnicalManagerApprover");
                });

            modelBuilder.Entity("BQuick.Models.QuotationItem", b =>
                {
                    b.HasOne("BQuick.Models.Item", "Item")
                        .WithMany("QuotationItems")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BQuick.Models.Quotation", "Quotation")
                        .WithMany("Items")
                        .HasForeignKey("QuotationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BQuick.Models.RFQ_Item", "RFQ_Item")
                        .WithMany()
                        .HasForeignKey("RFQ_ItemID");

                    b.Navigation("Item");

                    b.Navigation("Quotation");

                    b.Navigation("RFQ_Item");
                });

            modelBuilder.Entity("BQuick.Models.RFQ", b =>
                {
                    b.HasOne("BQuick.Models.User", "AssignedToAdminSales")
                        .WithMany("AssignedRFQsAsAdmin")
                        .HasForeignKey("AssignedToAdminSalesID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BQuick.Models.CustomerContactPerson", "ContactPerson")
                        .WithMany()
                        .HasForeignKey("ContactPersonID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BQuick.Models.User", "CreatedByUser")
                        .WithMany("CreatedRFQs")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.Customer", "Customer")
                        .WithMany("RFQs")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.User", "PersonalResourceEmployee")
                        .WithMany("PersonalResourceRFQs")
                        .HasForeignKey("PersonalResourceEmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BQuick.Models.RFQCategory", "RFQCategory")
                        .WithMany("RFQs")
                        .HasForeignKey("RFQCategoryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BQuick.Models.RFQOpportunity", "RFQOpportunity")
                        .WithMany("RFQs")
                        .HasForeignKey("RFQOpportunityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BQuick.Models.RFQStatus", "RFQStatus")
                        .WithMany("RFQs")
                        .HasForeignKey("RFQStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.User", "SalesManagerAssigner")
                        .WithMany("AssignedBySalesManagerRFQs")
                        .HasForeignKey("SalesManagerAssignerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssignedToAdminSales");

                    b.Navigation("ContactPerson");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("PersonalResourceEmployee");

                    b.Navigation("RFQCategory");

                    b.Navigation("RFQOpportunity");

                    b.Navigation("RFQStatus");

                    b.Navigation("SalesManagerAssigner");
                });

            modelBuilder.Entity("BQuick.Models.RFQAttachment", b =>
                {
                    b.HasOne("BQuick.Models.RFQ", "RFQ")
                        .WithMany("Attachments")
                        .HasForeignKey("RFQID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BQuick.Models.User", "UploadedByUser")
                        .WithMany("UploadedRFQAttachments")
                        .HasForeignKey("UploadedByUserID");

                    b.Navigation("RFQ");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("BQuick.Models.RFQNote", b =>
                {
                    b.HasOne("BQuick.Models.RFQ", "RFQ")
                        .WithMany("Notes")
                        .HasForeignKey("RFQID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RFQ");
                });

            modelBuilder.Entity("BQuick.Models.RFQ_Item", b =>
                {
                    b.HasOne("BQuick.Models.Vendor", "ChosenVendor")
                        .WithMany()
                        .HasForeignKey("ChosenVendorID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BQuick.Models.Item", "Item")
                        .WithMany("RFQItems")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BQuick.Models.PurchasingRequest", "OriginatingPurchasingRequest")
                        .WithMany("ResultingRFQItems")
                        .HasForeignKey("OriginatingPurchasingRequestID");

                    b.HasOne("BQuick.Models.RFQ", "RFQ")
                        .WithMany("Items")
                        .HasForeignKey("RFQID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChosenVendor");

                    b.Navigation("Item");

                    b.Navigation("OriginatingPurchasingRequest");

                    b.Navigation("RFQ");
                });

            modelBuilder.Entity("BQuick.Models.SurveyDocumentation", b =>
                {
                    b.HasOne("BQuick.Models.SurveyInstance", "SurveyInstance")
                        .WithMany("Documentations")
                        .HasForeignKey("SurveyInstanceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BQuick.Models.User", "UploadedByUser")
                        .WithMany("UploadedSurveyDocumentations")
                        .HasForeignKey("UploadedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SurveyInstance");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("BQuick.Models.SurveyInstance", b =>
                {
                    b.HasOne("BQuick.Models.User", "SubmittedByUser")
                        .WithMany("SubmittedSurveyInstances")
                        .HasForeignKey("SubmittedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.SurveyFormMaster", "SurveyForm")
                        .WithMany("SurveyInstances")
                        .HasForeignKey("SurveyFormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BQuick.Models.SurveyRequest", "SurveyRequest")
                        .WithMany("SurveyInstances")
                        .HasForeignKey("SurveyRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubmittedByUser");

                    b.Navigation("SurveyForm");

                    b.Navigation("SurveyRequest");
                });

            modelBuilder.Entity("BQuick.Models.SurveyPIC", b =>
                {
                    b.HasOne("BQuick.Models.PICApprovalStatus", "PICApprovalStatus")
                        .WithMany("SurveyPICs")
                        .HasForeignKey("PICApprovalStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.SurveyRequest", "SurveyRequest")
                        .WithMany("AssignedPICs")
                        .HasForeignKey("SurveyRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BQuick.Models.User", "TechnicalUser")
                        .WithMany("SurveyAssignments")
                        .HasForeignKey("TechnicalUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PICApprovalStatus");

                    b.Navigation("SurveyRequest");

                    b.Navigation("TechnicalUser");
                });

            modelBuilder.Entity("BQuick.Models.SurveyReportInstance", b =>
                {
                    b.HasOne("BQuick.Models.User", "GeneratedByUser")
                        .WithMany("GeneratedSurveyReports")
                        .HasForeignKey("GeneratedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.ReportMaster", "ReportMaster")
                        .WithMany("SurveyReportInstances")
                        .HasForeignKey("ReportMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.ReportStatus", "ReportStatus")
                        .WithMany("SurveyReportInstances")
                        .HasForeignKey("ReportStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.User", "SalesManagerReviewer")
                        .WithMany("SalesReviewedSurveyReports")
                        .HasForeignKey("SalesManagerReviewerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BQuick.Models.SurveyInstance", "SurveyInstance")
                        .WithMany("Reports")
                        .HasForeignKey("SurveyInstanceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.User", "TechManagerReviewer")
                        .WithMany("TechReviewedSurveyReports")
                        .HasForeignKey("TechManagerReviewerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("GeneratedByUser");

                    b.Navigation("ReportMaster");

                    b.Navigation("ReportStatus");

                    b.Navigation("SalesManagerReviewer");

                    b.Navigation("SurveyInstance");

                    b.Navigation("TechManagerReviewer");
                });

            modelBuilder.Entity("BQuick.Models.SurveyRequest", b =>
                {
                    b.HasOne("BQuick.Models.User", "CreatedByUser")
                        .WithMany("CreatedSurveyRequests")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BQuick.Models.RFQ", "RFQ")
                        .WithMany("SurveyRequests")
                        .HasForeignKey("RFQID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BQuick.Models.SurveyStatus", "SurveyStatus")
                        .WithMany("SurveyRequests")
                        .HasForeignKey("SurveyStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("RFQ");

                    b.Navigation("SurveyStatus");
                });

            modelBuilder.Entity("BQuick.Models.TechnicalCompetency", b =>
                {
                    b.HasOne("BQuick.Models.SurveyCategory", "SurveyCategory")
                        .WithMany("TechnicalCompetencies")
                        .HasForeignKey("SurveyCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BQuick.Models.User", "User")
                        .WithMany("TechnicalCompetencies")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BQuick.Models.User", b =>
                {
                    b.HasOne("BQuick.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BQuick.Models.Vendor", b =>
                {
                    b.HasOne("BQuick.Models.User", "CreatedByUser")
                        .WithMany("CreatedVendors")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BQuick.Models.PaymentTerm", "DefaultPaymentTerm")
                        .WithMany("VendorsAsDefault")
                        .HasForeignKey("DefaultPaymentTermID");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DefaultPaymentTerm");
                });

            modelBuilder.Entity("BQuick.Models.VendorBank", b =>
                {
                    b.HasOne("BQuick.Models.Vendor", "Vendor")
                        .WithMany("BankAccounts")
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("SurveyCategorySurveyRequest", b =>
                {
                    b.HasOne("BQuick.Models.SurveyCategory", null)
                        .WithMany()
                        .HasForeignKey("SurveyCategoriesSurveyCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BQuick.Models.SurveyRequest", null)
                        .WithMany()
                        .HasForeignKey("SurveyRequestsSurveyRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BQuick.Models.ApprovalDecisionStatus", b =>
                {
                    b.Navigation("ApprovalHistories");
                });

            modelBuilder.Entity("BQuick.Models.Customer", b =>
                {
                    b.Navigation("ContactPersons");

                    b.Navigation("RFQs");
                });

            modelBuilder.Entity("BQuick.Models.Item", b =>
                {
                    b.Navigation("ChildBundleItems");

                    b.Navigation("ParentBundleItems");

                    b.Navigation("QuotationItems");

                    b.Navigation("RFQItems");

                    b.Navigation("VendorPricings");
                });

            modelBuilder.Entity("BQuick.Models.ItemCategory", b =>
                {
                    b.Navigation("ItemTypes");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("BQuick.Models.ItemType", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("BQuick.Models.MeetingReportInstance", b =>
                {
                    b.Navigation("ApprovalHistories");
                });

            modelBuilder.Entity("BQuick.Models.MeetingRequest", b =>
                {
                    b.Navigation("AssignedPICs");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("BQuick.Models.MeetingStatus", b =>
                {
                    b.Navigation("MeetingRequests");
                });

            modelBuilder.Entity("BQuick.Models.PICApprovalStatus", b =>
                {
                    b.Navigation("MeetingPICs");

                    b.Navigation("SurveyPICs");
                });

            modelBuilder.Entity("BQuick.Models.PaymentTerm", b =>
                {
                    b.Navigation("CustomersAsDefault");

                    b.Navigation("Quotations");

                    b.Navigation("VendorsAsDefault");
                });

            modelBuilder.Entity("BQuick.Models.PurchasingRequest", b =>
                {
                    b.Navigation("ResultingRFQItems");
                });

            modelBuilder.Entity("BQuick.Models.PurchasingStatus", b =>
                {
                    b.Navigation("PurchasingRequests");
                });

            modelBuilder.Entity("BQuick.Models.Quotation", b =>
                {
                    b.Navigation("ApprovalHistories");

                    b.Navigation("Items");

                    b.Navigation("SplitChildQuotations");
                });

            modelBuilder.Entity("BQuick.Models.QuotationStatus", b =>
                {
                    b.Navigation("Quotations");
                });

            modelBuilder.Entity("BQuick.Models.RFQ", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Items");

                    b.Navigation("MeetingRequests");

                    b.Navigation("Notes");

                    b.Navigation("PurchasingRequests");

                    b.Navigation("Quotations");

                    b.Navigation("SurveyRequests");
                });

            modelBuilder.Entity("BQuick.Models.RFQCategory", b =>
                {
                    b.Navigation("RFQs");
                });

            modelBuilder.Entity("BQuick.Models.RFQOpportunity", b =>
                {
                    b.Navigation("RFQs");
                });

            modelBuilder.Entity("BQuick.Models.RFQStatus", b =>
                {
                    b.Navigation("RFQs");
                });

            modelBuilder.Entity("BQuick.Models.ReportMaster", b =>
                {
                    b.Navigation("MeetingReportInstances");

                    b.Navigation("SurveyReportInstances");
                });

            modelBuilder.Entity("BQuick.Models.ReportStatus", b =>
                {
                    b.Navigation("MeetingReportInstances");

                    b.Navigation("SurveyReportInstances");
                });

            modelBuilder.Entity("BQuick.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BQuick.Models.ShipmentTerm", b =>
                {
                    b.Navigation("Quotations");
                });

            modelBuilder.Entity("BQuick.Models.SurveyCategory", b =>
                {
                    b.Navigation("TechnicalCompetencies");
                });

            modelBuilder.Entity("BQuick.Models.SurveyFormMaster", b =>
                {
                    b.Navigation("SurveyInstances");
                });

            modelBuilder.Entity("BQuick.Models.SurveyInstance", b =>
                {
                    b.Navigation("Documentations");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("BQuick.Models.SurveyReportInstance", b =>
                {
                    b.Navigation("ApprovalHistories");
                });

            modelBuilder.Entity("BQuick.Models.SurveyRequest", b =>
                {
                    b.Navigation("AssignedPICs");

                    b.Navigation("SurveyInstances");
                });

            modelBuilder.Entity("BQuick.Models.SurveyStatus", b =>
                {
                    b.Navigation("SurveyRequests");
                });

            modelBuilder.Entity("BQuick.Models.User", b =>
                {
                    b.Navigation("ApprovalsMade");

                    b.Navigation("AssignedBySalesManagerRFQs");

                    b.Navigation("AssignedRFQsAsAdmin");

                    b.Navigation("CreatedMeetingRequests");

                    b.Navigation("CreatedPurchasingRequests");

                    b.Navigation("CreatedRFQs");

                    b.Navigation("CreatedSurveyRequests");

                    b.Navigation("CreatedVendors");

                    b.Navigation("DirectorApprovedQuotations");

                    b.Navigation("GeneratedMeetingReports");

                    b.Navigation("GeneratedSurveyReports");

                    b.Navigation("HandledPurchasingRequests");

                    b.Navigation("LedMeetingRequests");

                    b.Navigation("MeetingAssignments");

                    b.Navigation("Notifications");

                    b.Navigation("PersonalResourceRFQs");

                    b.Navigation("PreparedQuotations");

                    b.Navigation("SMApprovedQuotations");

                    b.Navigation("SalesReviewedSurveyReports");

                    b.Navigation("SubmittedSurveyInstances");

                    b.Navigation("SurveyAssignments");

                    b.Navigation("TMApprovedQuotations");

                    b.Navigation("TechReviewedSurveyReports");

                    b.Navigation("TechnicalCompetencies");

                    b.Navigation("UploadedRFQAttachments");

                    b.Navigation("UploadedSurveyDocumentations");
                });

            modelBuilder.Entity("BQuick.Models.Vendor", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("ItemPricings");
                });
#pragma warning restore 612, 618
        }
    }
}
